// converter functions for px to rems

// the base font-size value to be used for these functions
// this should reflect the font-size value of the base element, i.e. html
$rem-base: 16px !default;

// strips the unit
//
// $num   - number with unit
// return - number without unit
//
// example:
//   strip-unit(10px); // 10
//
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// convert px value to rem value
//
// $value      - single value of px to convert, with or without unit
// $base-value - base font size to use, defaults to global var $rem-base
// return      - single value in rem, with unit
//
// examples:
//   font-size: rem-calc(10);   // font-size: 0.625rem
//   font-size: rem-calc(10px); // font-size: 0.625rem
//   margin-top: rem-calc(0px); // margin-top: 0;
//
@function convert-to-rem($value, $base-value: $rem-base)  {
  $value: strip-unit($value) / strip-unit($base-value) * 1rem;
  @if ($value == 0rem) { $value: 0; } // Turn 0rem into 0
  @return $value;
}

// convert px value(s) to rem value(s)
//
// $values     - single value or list of px to convert, with or without unit
// $base-value - base font size to use, defaults to global var $rem-base
// return      - single value or list of rems, with unit
//
// examples:
//   font-size: rem-calc(10);   // font-size: 0.625rem
//   margin: rem-calc(1 2 3 4); // margin: 0.0625rem 0.125rem 0.1875rem 0.25rem
//
@function rem-calc($values, $base-value: $rem-base) {
  $max: length($values);
  @if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }
  $remValues: ();
  @for $i from 1 through $max {
    $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
  }
  @return $remValues;
}
