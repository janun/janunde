# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2016-08-18 16:10
from __future__ import unicode_literals

import core.blocks
import core.fields
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import phonenumber_field.modelfields
import wagtail.wagtailcore.blocks
import wagtail.wagtailcore.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0002_auto_20150616_2121'),
        ('core', '0022_auto_20160818_1809'),
        ('wagtailcore', '0029_unicode_slugfield_dj19'),
    ]

    state_operations = [
        migrations.CreateModel(
            name='EventIndexPage',
            fields=[
                ('basepage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.BasePage')),
            ],
            options={
                'verbose_name_plural': 'Auflistungen von Veranstaltungen',
                'verbose_name': 'Auflistung von Veranstaltungen',
            },
            bases=('core.basepage',),
        ),
        migrations.CreateModel(
            name='EventPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('subtitle', models.CharField(blank=True, max_length=255, null=True, verbose_name='Untertitel')),
                ('start_datetime', models.DateTimeField(verbose_name='Startzeit')),
                ('end_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Endzeit')),
                ('all_day', models.BooleanField(default=False, verbose_name='ganztägig')),
                ('late_attendence', models.BooleanField(default=False, help_text='Ist es auch möglich z.B. erst am zweiten Tag zu kommen?', verbose_name='späte Teilnahme möglich')),
                ('facebook_event_url', core.fields.FacebookEventURLField(blank=True, null=True, verbose_name='Facebook-Event')),
                ('website_url', core.fields.PrettyURLField(blank=True, help_text='z.B. auf der Veranstalter-Homepage', null=True, verbose_name='externe Website')),
                ('contact_mail', models.EmailField(blank=True, max_length=254, null=True, verbose_name='E-Mail')),
                ('contact_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Name')),
                ('contact_phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, verbose_name='Telefonnummer')),
                ('content', wagtail.wagtailcore.fields.StreamField((('h2', core.blocks.H2()), ('paragraph', wagtail.wagtailcore.blocks.RichTextBlock(icon='pilcrow', label='Absatz')), ('image', core.blocks.ImageBlock()), ('embedded_video', core.blocks.VideoBlock())), blank=True, verbose_name='Inhalt')),
                ('color', models.CharField(blank=True, choices=[('rgb(70, 187, 0)', 'Grün'), ('rgb(196, 23, 55)', 'Rot'), ('rgb(0, 118, 164)', 'Blau'), ('rgb(233, 88, 34)', 'Orange')], help_text='Die Veranstaltung bekommt diese Farbe, falls es kein Bild gibt.', max_length=18, null=True, verbose_name='Farbe als Ersatz für Bild')),
                ('location', models.CharField(blank=True, help_text='Ort, an dem die Veranstaltung stattfindet', max_length=255, null=True, verbose_name='Ort')),
                ('register_url', core.fields.PrettyURLField(blank=True, help_text='z.B. auf der externen Seite oder bei einem Formularservice', null=True, verbose_name='Link zu Anmelde-Formular')),
                ('event_page_tags', modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='core.JanunTag', to='taggit.Tag', verbose_name='Tags')),
                ('main_image', models.ForeignKey(blank=True, help_text='Bitte kein Gruppen- oder JANUN-Logo!', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='core.AttributedImage', verbose_name='Bild')),
                ('related_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='event_pages', to='core.Group', verbose_name='Zugehörige JANUN-Gruppe')),
            ],
            options={
                'verbose_name_plural': 'Veranstaltungen',
                'verbose_name': 'Veranstaltung',
            },
            bases=('wagtailcore.page',),
        ),
    ]


    def update_contenttypes(apps, schema_editor):
        from django.contrib.contenttypes.management import update_contenttypes
        update_contenttypes(apps.app_configs['events'])
        # ContentType = apps.get_model('contenttypes.ContentType')
        # print( [ct.name for ct in ContentType.objects.all()] )


    def fix_contenttypes(apps, schema_editor):
        # from django.contrib.contenttypes.management import update_contenttypes
        # update_contenttypes(apps.app_configs['events'])

        ContentType = apps.get_model('contenttypes.ContentType')


        EventPage = apps.get_model('events.EventPage')
        eventpage_ct = ContentType.objects.get_for_model(EventPage)
        for eventpage in EventPage.objects.all():
            eventpage.content_type = eventpage_ct
            eventpage.save()

        EventIndexPage = apps.get_model('events.EventIndexPage')
        eventindexpage_ct = ContentType.objects.get_for_model(EventIndexPage)
        for eventindexpage in EventIndexPage.objects.all():
            eventindexpage.content_type = eventindexpage_ct
            eventindexpage.save()


    operations = [
        migrations.SeparateDatabaseAndState(state_operations=state_operations),
        # migrations.RunPython(update_contenttypes),
        migrations.RunPython(fix_contenttypes)
    ]
